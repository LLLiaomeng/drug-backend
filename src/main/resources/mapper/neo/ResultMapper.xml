<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kagemusha.drugdemo.mapper.neo.ResultMapper">

    <select id="queryDrugInteraction" parameterType="java.util.List" resultType="String">
        match (drug1:`药品`)-[:成分*0..2]->()-[:相互作用*2]->()-[:成分*0..2]-(drug2:`药品`)
        where drug1.name in #{drug} and drug2.name in #{drug}
        return distinct
        case
            when id(drug1) > id(drug2)
            then drug1.name + " 和 " + drug2.name + " 发生相互作用;"
            else drug2.name + " 和 " + drug1.name + " 发生相互作用;"
        end
    </select>

    <select id="queryAllergy" parameterType="java.util.List" resultType="String">
        match (drug1:`药品`)-[:成分*2]->(drug2:`药物`)
        where drug1.name in #{drug} and drug2.name in #{allergy}
        return distinct drug1.name + " 中含有过敏物质 " + drug2.name + ";"
    </select>

    <select id="queryAdverseReaction" parameterType="java.util.List" resultType="String">
        match (drug:`药品`)-[:不良反应*2]->(ds)
        where drug.name in #{drug} and (ds.name in #{disease} or ds.name in #{symptom})
        return distinct drug.name + " 会导致不良反应 " + ds.name + ";"
    </select>

    <select id="queryRoute" parameterType="java.util.List" resultType="String">
        match (drug:`药品`)-[:用药方法*2]->(route:`给药途径`)
        where drug.name = #{drug} and route.name = #{route}
        return distinct drug.name
    </select>

    <select id="querySpecialCrowd" parameterType="java.util.List" resultType="String">
        match (drug:`药品`)-[:用药]->(fact:`fact`)-[:用药]->(crowd:`人群`),(fact)-[:用药结果]->(useResult:`用药结果级别`)
        where drug.name in #{drug} and crowd.name in #{specialCrowd}
        return distinct crowd.name + useResult.name + drug.name + ";"
    </select>


    <select id="queryRepeatedUse" parameterType="java.util.List" resultType="String">
        match (drug1:`药品`)-[:成分*0..2]->(drug2:`药物`)-[:成分*0..2]-(drug3:`药品`)
        where drug1.name in #{drug} and drug3.name in #{drug} and (id(drug1) > id(drug3) or id(drug3) > id(drug1))
        return distinct
        case
            when id(drug1) > id(drug3)
            then drug1.name + " 和 " + drug3.name + " 都含有 " + drug2.name + ";"
            else drug3.name + " 和 " + drug1.name + " 都含有 " + drug2.name + ";"
        end
    </select>

    <select id="queryGenderWoman" parameterType="java.util.List" resultType="String">
        match (drug1)-[:治疗*2]->()-[:`instance of`]->(diseaseType)
        where diseaseType.name = "男性生殖系统疾病" and drug1.name in #{drug}
        return drug1.name + "不能用于女性;" as result
        union
        match (drug2)-[:`instance of`]->(drugType)
        where drugType.name = "雄激素及同化激素" and drug2.name in #{drug}
        return drug2.name + "不能用于女性;" as result
        union
        match (drug3)-[:用药方法*2]->(route)
        where route.name contains "阴茎" and drug3.name in #{drug}
        return drug3.name + "不能用于女性;" as result
        union
        match (drug4)-[:包装]->(formulation)
        where formulation.name contains "阴茎" and drug4.name in #{drug}
        return drug4.name + "不能用于女性;" as result
    </select>

    <select id="queryGenderMan" parameterType="java.util.List" resultType="String">
        match (drug1)-[:治疗*2]->()-[:`instance of`]->(diseaseType)
        where diseaseType.name = "女性生殖系统疾病" and drug1.name in #{drug}
        return drug1.name + "不能用于男性;" as result
        union
        match (drug2)-[:`instance of`]->(drugType)
        where drugType.name = "雌激素、孕激素及抗孕激素" and drug2.name in #{drug}
        return drug2.name + "不能用于男性;" as result
        union
        match (drug3)-[:用药方法*2]->(route)
        where (route.name contains "子宫" or route.name contains "乳房" or route.name contains "阴道") and drug3.name in #{drug}
        return drug3.name + "不能用于男性;" as result
        union
        match (drug4)-[:包装]->(formulation)
        where (formulation.name contains "子宫" or formulation.name contains "乳房" or formulation.name contains "阴道") and drug4.name in #{drug}
        return drug4.name + "不能用于男性;" as result
    </select>

    <select id="queryContraindication" parameterType="java.util.List" resultType="String">
        match (drug:`药品`)-[:用药*2]->()-[:患有*2]->(ds)
        where drug.name in #{drug} and (ds.name in #{disease} or ds.name in #{symptom})
        return distinct drug.name + " 不能用于治疗 " + ds.name + ";"
    </select>

    <select id="queryDosage" parameterType="java.util.List" resultType="String">
        match (drug1)-[:用药]->(crowd1) , (crowd1)-[:`instance of`]->(crowdType1)-[:`subclass of`*0..2]->(crowdType2)
        where drug1.name = #{drug} and (crowdType1.name in #{specialCrowd} or crowdType1.name in #{crowd} or crowdType2.name in #{specialCrowd} or crowdType2.name in #{crowd})
        optional match (crowd2)-[:患病]->(ds)
        where id(crowd2) = id(crowd2)
        with crowd1, crowd2, ds,
        case
            when not ds.name in #{disease} and not ds.name in #{symptom}
            then id(crowd2)
            else 0
        end as del1
        with crowd1, del1
        match (crowd3)-[:用药年龄]->(ageUnit)-[:量纲化]->(age), (ageUnit)-[:`instance of`]->(ageUnitType)
        where id(crowd3) = id(crowd1)
        with crowd1, del1, crowd3, ageUnitType, age,
        case
            when ageUnitType.name contains "日"
            then 1
            when ageUnitType.name contains "周"
            then 7
            when ageUnitType.name contains "月"
            then 30
            when ageUnitType.name contains "年"
            then 365
            else 0
        end as num
        with crowd1, del1, crowd3, ageUnitType, age,
        toInt(age.name) * num as nAge
        with crowd1, del1, crowd3, ageUnitType, nAge,
        case
            when crowd3 is not null
            then
                case
                    when ageUnitType.name contains "小于" and #{age} > nAge
                    then id(crowd3)
                    when ageUnitType.name contains "大于" and nAge > #{age}
                    then id(crowd3)
                    when ageUnitType.name contains "之间" and MIN(nAge) > #{age} and #{age} > MAX(nAge)
                    then id(crowd3)
                    when not #{age} = nAge
                    then id(crowd3)
                    else 0
                end
            else 0
        end as del2
        with crowd1, del1, del2
        where (id(crowd1) > del1 or del1 > id(crowd1)) and (id(crowd1) > del2 or del2 > id(crowd1))
        match (crowd1)-[:用药方法]->(route)-[:用药剂量]->(dosageUnit)-[:量纲化]->(dosage), (route)-[:用药频率]->(frequencyUnit)-[:量纲化]->(frequency)
        where route.name = #{route}
        return crowd1.name, route.name, dosageUnit.name, dosage.name, frequencyUnit.name, frequency.name
    </select>

    <select id="queryInjectionCompatibility" parameterType="java.util.List" resultType="String">
        match (drug1:`药品`)-[:成分*0..2]->()-[:体外配伍*2]->()-[:成分*0..2]-(drug2:`药品`)
        where drug1.name in #{drug} and drug2.name in #{drug}
        return distinct drug1.name + " 不能与 " + drug2.name + "配伍;"
    </select>

    <select id="queryAge" parameterType="java.util.List" resultType="com.kagemusha.drugdemo.entity.neo.AgeRes">
        match (drug:`药品`)
        where drug.name in #{drug}
        match (drug)-[:用药]->(fact:`fact`)-[:用药]->(crowd:`人群`), (fact)-[:用药结果]-(grade)
        optional match (crowd)-[:细粒度化]-(fact2)-[:数字]-(num), (fact2)-[:单位]-(unit), (fact2)-[:数字]-(num2)
        where toInt(num2.name) > toInt(num.name)
        return drug.name as `name`, crowd.name as crowd, num.name as num, num2.name as num2, unit.name as unit, grade.name as grade
    </select>

</mapper>